head(df)
from_genes <- unique(df$from)
to_genes <- unique(df$to)
all_unique <- unique(c(from_genes, to_genes))
gene_list <- read.table("C:/Users/franc/OneDrive/Desktop/Tirocinio/regulators-list.txt", header = T)
head(gene_list)
gene_selected <- gene_list[, 3]
gene_selected <- c(gene_selected, "ADAR", "ADARB1")
df_new <- data.frame()
for (gene in gene_selected) {
df1 <- filter(df, df[, 1] == gene)
df2 <- filter(df, df[, 2] == gene)
df2 <- df2[, c("to", "from", "weight")]
colnames(df2) <- c("from", "to", "weight")
df3 <- rbind(df1, df2)
df_new <- rbind(df_new, df3)
}
library(dplyr)
df_new <- data.frame()
for (gene in gene_selected) {
df1 <- filter(df, df[, 1] == gene)
df2 <- filter(df, df[, 2] == gene)
df2 <- df2[, c("to", "from", "weight")]
colnames(df2) <- c("from", "to", "weight")
df3 <- rbind(df1, df2)
df_new <- rbind(df_new, df3)
}
df_list <- split(df_new, df_new$from)
df_list <- lapply(df_list, function(df) {df[, -1]})
df_list$ADAR
df_list$ADARB1
df_list
df
library(gprofiler)
install.packages("gprofiler")
install.packages("gProfileR")
library(gProfileR)
regul_mm2 <- aracne2regulon("C:/Users/franc/OneDrive/Desktop/Tirocinio/interactors_mm2.adj", mm2m, verbose = TRUE)
library(viper)
load("C:/Users/franc/OneDrive/Desktop/Tirocinio/mm6m.txt")
load("C:/Users/franc/OneDrive/Desktop/Tirocinio/A549m.txt")
load("C:/Users/franc/OneDrive/Desktop/Tirocinio/hs1m.txt")
regul_mm2 <- aracne2regulon("C:/Users/franc/OneDrive/Desktop/Tirocinio/interactors_mm2.adj", mm2m, verbose = TRUE)
load("C:/Users/franc/OneDrive/Desktop/Tirocinio/mm2m.txt")
regul_mm2 <- aracne2regulon("C:/Users/franc/OneDrive/Desktop/Tirocinio/interactors_mm2.adj", mm2m, verbose = TRUE)
head(regul_mm2)
vpres_mm6_mm2 <- viper(mm6m, regul_mm2, verbose = FALSE)
head(vpres_mm6_mm2)
colnames(vpres_mm6_mm2) <- c("GSM3638986.WT", "GSM3638987.WT", "GSM3638988.WT", "GSM3638989.ADAR1KO", "GSM3638990.ADAR1KO",
"GSM3638991.ADAR1KO")
vpres_mm6_mm2_df <- data.frame(type = factor(c(rep("WT", 3), rep("ADAR1.KO", 3))))
rownames(vpres_mm6_mm2_df) <- colnames(vpres_mm6_mm2)
design <- model.matrix(~ type, data = vpres_mm6_mm2_df)
fit_mm6_mm2 <- lmFit(vpres_mm6_mm2, design=design)
library(limma)
fit_mm6_mm2 <- lmFit(vpres_mm6_mm2, design=design)
fit_mm6_mm2 <- eBayes(fit_mm6_mm2)
topTable(fit_mm6_mm2)
heatmap(vpres_mm6_mm2[c("FRS3", "TXNRD1", "NDRG1", "CCDC88A", "FGF9", "ZDHHC5", "HIF1A", "ZDHHC4", "RHBDL1", "GABARAP", "ADAR", "ADARB1"), ],
Rowv = NA, Colv = NA, main = "MM6 - MM2 regulon")
vpres_mm2 <- viper(mm2m, regul_mm2, verbose = FALSE)
head(vpres_mm2)
colnames(vpres_mm2) <- c("GSM3610089.WT", "GSM3610090.WT", "GSM3610091.WT",
"GSM3610092.WT", "GSM3610093.ADAR1KD", "GSM3610094.ADAR1KD",
"GSM3610095.ADAR2KD", "GSM3610096.ADAR2KD", "GSM3610097.ADAR2KD",
"GSM3610098.ADAR2KD", "GSM3610099.WT", "GSM3610100.WT")
vpres_mm2_df <- data.frame(type = factor(c(rep("WT", 4), rep("ADAR1KD", 2), rep("ADAR2KD", 4), rep("WT", 2))))
rownames(vpres_mm2_df) <- colnames(vpres_mm2)
design <- model.matrix(~ type, data = vpres_mm2_df)
fit_mm2 <- lmFit(vpres_mm2, design=design)
fit_mm2 <- eBayes(fit_mm2)
topTable(fit_mm2)
top_genes_mm2 <- rownames(topTable(fit_mm2))
heatmap(vpres_mm2[c("CX3CL1", "NEDD4L", "CREBBP","BTAF1", "GOPC","LDLRAD3", "ZDHHC2", "CADM2", "RABEP1", "CASK", "ADARB1", "ADAR"), ])
heatmap(vpres_mm2[c("CX3CL1", "NEDD4L", "CREBBP","BTAF1", "GOPC","LDLRAD3", "ZDHHC2", "CADM2", "RABEP1", "CASK", "ADARB1", "ADAR"), ],
Rowv = NA, Colv = NA, main = "MM2 - MM2 regulon")
head(regul_mm2)
a <- Gene(id ="ajd", name="mk", chrom="2", strand = "+", start=23, end = 45)
setClass('Gene',
representation = list(
id = 'character',
hugo = 'character',
name = 'character',
chrom = 'character',
gene_type = 'character',
strand = 'character',
start = 'numeric',
end = 'numeric',
exon_number = 'numeric',
intron_number = 'numeric'
), 'VIRTUAL',
validity=function(object) {
if (nchar(object@gene_type[1]) > 0) {
if (!(object@gene_type %in% c('coding gene', 'miRNA gene', 'lncRNA gene'))) {
stop(print('Gene type must be \'coding gene\', \'miRNA gene\' or \'lncRNA gene\''))
} else { TRUE }
}
}
)
setMethod(f = 'show',
signature = 'Gene',
definition = function(object) {
cat(
c(paste('Gene ID: ', object@id),
paste('HUGO name: ', object@hugo),
paste('Gene name: ', object@name),
paste('Chromosome: ', object@chrom),
paste('Gene type: ', object@gene_type),
paste('Strand: ', object@strand),
paste('Start: ', object@start),
paste('End: ', object@end),
paste('Number of exons: ', object@exon_number),
paste('Number of introns: ', object@intron_number)
),
sep = '\n'
)
})
setGeneric('id', function(x) standardGeneric('id'))
a$id
a <- Gene(id ="ajd", name="mk", chrom="2", strand = "+", start=23, end = 45)
setGeneric('Gene', function(id, hugo = '', name, chrom, type = '', strand, start, end, exons = NA_real_, introns = NA_real_) standardGeneric('Gene'))
setMethod('Gene', signature = c(),function(id, hugo = '', name, chrom, type = '', strand, start, end, exons = NA_real_, introns = NA_real_) {
new('Gene', id = id, hugo = hugo, name = name, chrom = chrom, gene_type = type,
strand = strand, start = start, end = end, exon_number = exons, intron_number = introns)
})
a <- Gene(id ="ajd", name="mk", chrom="2", strand = "+", start=23, end = 45)
a@id
a@id <- "a"
a
id(a)
setGeneric('id', function(x) standardGeneric('id'))
setGeneric('id<-', function(x, value) standardGeneric('id<-'))
setMethod('id', 'Gene', function(x) x@id)
setMethod('id<-', 'Gene', function(x, value) {
x@id <- value
x
})
id(a)
current.node = as.package("geneTypes")
library(devtools)
current.node = as.package("geneTypes")
load_all(current.node$path)
warnings()
current.node = as.package("geneTypes")
load_all(current.node$path)
current.node = as.package("geneTypes")
load_all(current.node$path)
document(current.node)
current.node = as.package("geneTypes")
load_all(current.node$path)
document(current.node)
current.node = as.package("geneTypes")
load_all(current.node$path)
document(current.node)
library(devtools)
current.node = as.package("geneTypes")
load_all(current.node$path)
document(current.node)
devtools::create("distConvert")
current.node = as.package("geneTypes")
load_all(current.node$path)
document(current.node)
library(geneTypes)
?Gene
?`Gene,ANY-method`
?Gene
?`Gene,ANY-method`
?Gene
?`Gene,ANY-method`
Gene(id = 'scj', hugo = 'snk', name = 'cn', chrom = '2', type = 'coding gene', strand = '+',
start = 26, end = 36)
a <-Gene(id = 'scj', hugo = 'snk', name = 'cn', chrom = '2', type = 'coding gene', strand = '+',
start = 26, end = 36)
lengthGene(a)
a <-Gene(id = 'scj', hugo = 'snk', name = 'cn', chrom = '2', type = 'dd gene', strand = '+',
start = 26, end = 36)
library(BiocCheck)
b <- lncRNAGene(id = 'scj', hugo = 'snk', name = 'cn', chrom = '2', type = 'lncRNA gene', strand = '+',
start = 26, end = 36)
b <- lncRNAGene(lncRNA_id = 'scj', hugo = 'snk', name = 'cn', chrom = '2', type = 'lncRNA gene', strand = '+',
start = 26, end = 36)
b <- lncRNAGene(id = 'sncj', lncRNA_id = 'scj', hugo = 'snk', name = 'cn', chrom = '2', type = 'lncRNA gene', strand = '+',
start = 26, end = 36)
b <- lncRNAGene(id = 'sncj', lncRNA_id = 'scj', hugo = 'snk', name = 'cn', chrom = '2', type = 'lncRNA gene', strand = '+',
start = 26, end = 36, lncRNA_seq = 'ISJNX')
lengthProduct(b)
b
BiocManager::install('BiocCheck')
BiocManager::install('BiocCheck')
install.packages('BiocCheck')
install.packages('Rtools')
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocCheck")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocCheck")
library(BiocCheck)
library(BiocCheck)
BiocManager::install("BiocCheck")
devtools::install_github("Bioconductor/BiocManager", ref="ghost-binary-repo")
BiocManager::install("BiocCheck")
library(BiocCheck)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocCheck")
help("repositories", package
= "BiocManager")
BiocManager::repositories()
devtools::install_github("Bioconductor/BiocManager", ref="ghost-binary-repo")
devtools::install_github("Bioconductor/BiocManager", ref="ghost-binary-repo")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocCheck")
install.packages("BiocManager").
install.packages("BiocManager")
install.packages("BiocManager")
BiocManager::install("BiocCheck")
BiocManager::install("BiocCheck")
library(BiocCheck)
BiocCheck("geneTypes")
use_vignette("geneTypes")
library(devtools)
use_vignette("geneTypes")
use_vignette("geneTypes")
rlang::last_trace()
current.node = as.package("geneTypes")
load_all(current.node$path)
document(current.node)
use_vignette("geneTypes")
setwd("geneTypes")
use_vignette("geneTypes")
library(geneTypes)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(geneTypes)
library(geneTypes)
library(BiocStyle)
ins <- CodingGene(id = "ENSG00000254647", hugo = "INS", name = "insulin",
chrom = "11", type = "coding gene", strand = "-",
start = 2159779, end = 2161209, exons = 3, introns = 2,
prot_id = "NP_000198.1", orf_size = 333)
mir21 <- miRNAGene(id = "ENSG00000284190", hugo = "MIR21",
name = "microRNA 21", chrom = "17", type = "miRNA gene",
strand = "+", start = 57918627, end = 57918698, exons = 1,
introns = 0, miRNA_id = "MI0000077	",
miRNA_seq = "UAGCUUAUCAGACUGAUGUUGA",
seed_seq = "UAGCUUAUCAGACUGAUGUUGA")
hotair <- lncRNAGene(id = "ENSG00000228630", hugo = "HOTAIR",
name = "HOX transcript antisense RNA", chrom = "12",
type = "lncRNA gene", strand = "-", start = 54356092,
end = 54368740, exons = 6, introns = 5,
lncRNA_id = "NR_047517.1", lncRNA_seq = "")
lengthGene(ins)
lengthProduct(ins)
current.node = as.package("geneTypes")
setwd("C:/Users/franc/OneDrive/Documenti")
current.node = as.package("geneTypes")
load_all(current.node$path)
document(current.node)
setwd("geneTypes")
build_vignettes("geneTypes")
setwd("C:/Users/franc/OneDrive/Documenti")
build_vignettes("geneTypes")
setwd("C:/Users/franc/OneDrive/Documenti")
current.node = as.package("geneTypes")
load_all(current.node$path)
document(current.node)
setwd("C:/Users/franc/OneDrive/Documenti")
current.node = as.package("geneTypes")
load_all(current.node$path)
document(current.node)
remove.packages(geneTypes)
remove.packages('geneTypes')
setwd("C:/Users/franc/OneDrive/Documenti")
current.node = as.package("geneTypes")
load_all(current.node$path)
document(current.node)
build_vignettes("geneTypes")
BiocCheck("geneTypes")
x <- 1:10
x[!(x %in% 3:6)]
sum <- 0
i <- 1
while (sum < 30) {}
sum <- 0
i <- 1
while(sum < 30) {
sum <- sum + myvec[i]
i <- i + 1
}
while(sum < 30) {
sum <- sum + i
i <- i + 1
}
sum
is.nan(NA)
factor(1:4, 3)
myfac <- factor(1:4, 3)
myfac
myfac!= 3
myfac[6] <- 5
mat1 <- matrix(1:4, nrow = 2)
mat1
mat2 <- matrix(7:12, nrow = 2)
mat2
mat3 <- matrix(c(0.1, 0.2, 0.3, 0.4), nrow = 2)
mat3
mylist <- list(mat1, mat2, mat3)
length(unlist(mylist))
unlist(mylist)
student <- function(n, a, g) {
newstud <- list(name = n, age = a, gpa = g)
class(newstud) <- student
}
a <- student('gio', 25, 23)
student <- function(n, a, g) {
newstud <- list(name = n, age = a, gpa = g)
class(newstud) <- "student"
}
a <- student('gio', 25, 23)
class(a)
is.s3(a)
a
setClass('student', slots = list(name = 'character', age = 'numeric', gpa = 'numeric'))
b <- new('student', 'sofia', 26, 21)
b <- new('student', name='sofia', age=26, gpa=21)
b
student <- setClass('student', slots = list(name = 'character', age = 'numeric', gpa = 'numeric'))
c <- student(name = 'fra', age = 24, gpa = 20)
c
b@name
slot(b, 'name')
student <- setRefClass("student", fields = list(name = "character",
age = "numeric",
GPA = "numeric"))
s <- student(name = "John", age = 21, GPA = 3.5)
student <- setRefClass("student", fields = list(name = "character",
age = "numeric",
GPA = "numeric"))
s <- student(name = "John", age = 21, GPA = 3.5)
student <- setRefClass("student", fields = list(name = "character",
age = "numeric",
GPA = "numeric"))
s <- student(name = "John", age = 21, GPA = 3.5)
student <- setRefClass("student", fields = list(name = "character",
age = "numeric",
GPA = "numeric"))
s <- student(name = "John", age = 21, GPA = 3.5)
s <- new('student', name = "John", age = 21, GPA = 3.5)
student <- setRefClass("student", fields = list(name = "character", age = "numeric", GPA = "numeric"))
s <- student(name = "John", age = 21, GPA = 3.5)
student <- setRefClass("student", fields = list(name = "character", age = "numeric", GPA = "numeric"))
s <- student(name = "John", age = 21, GPA = 3.5)
setRefClass("student", fields = list(name = "character", age = "numeric", GPA = "numeric"))
s <- new('student', name = "John", age = 21, GPA = 3.5)
mat1 <- matrix(1:4, nrow = 2)
mat1
mat2 <- matrix(7:12, nrow = 2)
mat2
mat3 <- matrix(c(0.1, 0.2, 0.3, 0.4), nrow = 2)
mat3
mylist <- list(mat1, mat2, mat3)
mylist[2]
mylist$mat2
mylist@mat2
mylist['mat2']
mylist <- list(mat1, mat2, mat3)
mylist['mat2']
mylist[2]
lapply(mylist, sum)
gene <- function(i, n, c) {
new_gene <- list(id=i, name=n, chrom=c)
class(new_gene) <- 'gene'
}
s3 <- gene("id_001", "PTEN", "chrom17")
s3
setClass("geneS4", slots = list(id = "character", name = "character", chrom = "character"))
s4 <- new("geneS4", id="id_001", name="PTEN", chrom="chrom17")
s4
name(s3)
s4@name <- "TP53"
s4
s3[2] <- "TP53"
s3
s3["name"] <- "TP53"
s3
s3 <- gene("id_001", "PTEN", "chrom17")
s3
gene <- function(i, n, c) {
new_gene <- list(id=i, name=n, chrom=c)
class(new_gene) <- 'gene'
return(new_gene)
}
s3 <- gene("id_001", "PTEN", "chrom17")
s3
s3["name"] <- "TP53"
s3
s3c <- s3.copy()
s4c <- s4.copy()
s3c <- s3.copy
s4c <- s4.copy
s3c <- s3
s4c <- s4
isS4(s4)
isS4(s3)
student <- setRefClass("student", fields = list(name = "character", age = "numeric", gpa = "numeric"))
getClass("student")
isS4("student")
x <- 1:8
x2 <- x[!(x %in% 3:6)]
x2
myfac <- factor(c(1, 2, 3, 1, 2, 1), levels=1:4)
as.vector(myfac)
HS3 <- read.csv('C:/Users/franc/OneDrive/Desktop/Tirocinio/Datasets/SraRunTable_HS3.txt', header = T)
View(HS3)
HS1 <- read.csv('C:/Users/franc/OneDrive/Desktop/Tirocinio/Datasets/SraRunTable_HS1.txt', header = T)
View(HS1)
View(HS1n)
View(HS1)
HS1pres <- HS1[, c("Run", "Sample.Name", "Bases", "differential_stage", "Instrument", "knockdown")]
View(HS1pres)
HS1pres <- HS1[, c("Run", "Sample.Name", "Bases", "differential_stage", "Instrument", "knockdown",  "LibraryLayout", "source_name", "strain")]
HS1pres <- HS1[, c("Run", "Sample.Name", "Bases", "differential_stage", "Instrument", "knockdown",  "LibraryLayout", "source_name", "Strain")]
View(HS1pres)
HS1pres <- HS1[, c("Run", "Sample.Name", "Bases", "AvgSpotLen", "differential_stage", "Instrument", "knockdown",  "LibraryLayout", "source_name", "Strain")]
View(HS1pres)
HS1pres <- HS1[, c("Run", "Sample.Name", "Bases", "AvgSpotLen", "differential_stage", "knockdown", "source_name", "Strain")]
View(HS1pres)
colnames(c(HS1pres$Sample.Name, HS1pres$differential_stage, HS1pres$knockdown, HS1pres$source_name)) <-
C("Sample name", "Differential stage", "Knock down", "Cells type")
colnames(c(HS1pres[, "Sample.Name"], HS1pres[, "differential_stage"], HS1pres[, "knockdown"], HS1pres[, "source_name"])) <-
C("Sample name", "Differential stage", "Knock down", "Cells type")
colnames(c(HS1pres[, 2], HS1pres[, 5], HS1pres[, 6], HS1pres[, 7])) <-
C("Sample name", "Differential stage", "Knock down", "Cells type")
colnames(c(HS1pres[, 2], HS1pres[, 5], HS1pres[, 6], HS1pres[, 7])) <-
c("Sample name", "Differential stage", "Knock down", "Cells type")
colnames(c(HS1pres[, "Sample.Name"], HS1pres[, "differential_stage"], HS1pres[, "knockdown"], HS1pres[, "source_name"])) <-
c("Sample name", "Differential stage", "Knock down", "Cells type")
names(HS1pres)
names(HS1pres)[2, 5, 6, 7]
names(HS1pres)[c(2, 5, 6, 7)]
names(HS1pres)[c(2, 5, 6, 7)] <- c("Sample name", "Differential stage", "Knock down", "Source name")
View(HS1pres)
View(HS1pres)
HS1 <- read.csv('C:/Users/franc/OneDrive/Desktop/Tirocinio/Datasets/SraRunTable_HS1.txt', header = T)
View(HS1)
HS1 <- read.csv('C:/Users/franc/OneDrive/Desktop/Tirocinio/Datasets/SraRunTable_HS1.txt', header = T)
View(HS1)
HS1n <- HS1[, c("Run", "Sample.Name")]
HS1n["Type"] <- c(rep("ADAR WT", 6), rep("ADAR KD", 6))
names(HS1pres)[c(2, 5, 6, 7)] <- c("Sample name", "Differential stage", "Knock down", "Source name")
View(HS1)
HS1pres <- HS1[, c("Run", "Sample.Name", "Bases", "AvgSpotLen", "differential_stage", "knockdown", "source_name")]
View(HS1pres)
HS5 <- read.csv('C:/Users/franc/OneDrive/Desktop/Tirocinio/Datasets/SraRunTable_HS5.txt', header = T)
View(HS5)
HS5pres <- HS5[, c("Run", "Sample.Name", "Bases", "sirna_transfection", "source_name")]
View(HS5pres)
HS6 <- read.csv('C:/Users/franc/OneDrive/Desktop/Tirocinio/Datasets/SraRunTable_HS6.txt', header = T)
write.table(HS6, file = 'C:/Users/franc/OneDrive/Desktop/Tirocinio/Datasets/HS6.txt', row.names = F, col.names = T, sep = '\t', quote = F)
HS6pres <- HS6[, c("Run", "Sample.Name", "Bases", "sirna_transfection", "source_name")]
View(HS6)
HS6pres <- HS6[, c("Run", "Sample.Name", "Bases")]
View(HS6pres)
MM2 <- read.csv('C:/Users/franc/OneDrive/Desktop/Tirocinio/Datasets/SraRunTable_MM2.txt', header = T)
View(MM2)
MM2pres <- MM2[, c("Run", "Sample.Name", "Bases", "genotype.variation", "Cell_type")]
View(MM2pres)
MM6 <- read.csv('C:/Users/franc/OneDrive/Desktop/Tirocinio/Datasets/SraRunTable_MM6.txt', header = T)
View(MM6)
MM6pres <- MM6[, c("Run", "Sample.Name", "Bases", "genotype", "source_name")]
View(MM6pres)
remove.packages(gprofiler2)
remove.packages("gprofiler2")
setwd("C:/home")
setwd('C:/Users/franc/OneDrive/Desktop/Tirocinio/)
''
-
library(network2adj)
a <- getDataframe(network)
browseVignettes("network2adj")
df <- getDataframe(network)
gene_symbols <- getGeneSymbols(df, organism = "hsapiens")
head(gene_symbols)
df <- getGeneSymbolDataframe(df, gene_symbols, organism = "hsapiens")
head(df)
data(vsd_matrix)
vsd_matrix <- getGeneSymbolMatrix(vsd_matrix, gene_symbols,
organism = "hsapiens")
head(vsd_matrix)
data(regulators_list)
regulators <- getInteractorsList(df, regulators_list)
head(regulators)
(regulators)
writeAdjFile(regulators, file_name = "interactors")
setwd('C:/Users/franc/OneDrive/Desktop/')
library(devtools)
use_vignette("network2adj")
use_vignette("C:/Users/franc/OneDrive/Desktop/network2adj")
use_vignette("C:/Users/franc/OneDrive/Desktop/")
use_vignette("C:/Users/franc/OneDrive/Desktop/network2adj")
use_vignette("C:/Users/franc/OneDrive/Desktop/network2adj")
setwd('C:/Users/franc/OneDrive/Desktop/network2adj')
use_vignette("C:/Users/franc/OneDrive/Desktop/network2adj")
use_vignette("C:/Users/franc/OneDrive/Desktop/network2adj")
use_vignette("C:/Users/franc/OneDrive/Desktop/")
setwd('C:/Users/franc/OneDrive/Desktop/')
setwd('network2adj')
use_vignette('network2adj')
